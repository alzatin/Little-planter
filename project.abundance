{
  "atomType": "Molecule",
  "name": "Little planter",
  "x": 0,
  "y": 0,
  "uniqueID": "b182de28-600b-4a8b-923e-ff1be501fd14",
  "ioValues": [
    {
      "name": "Base width",
      "ioValue": 200,
      "currentEquation": "200"
    },
    {
      "name": "Height",
      "ioValue": 200
    }
  ],
  "topLevel": true,
  "allAtoms": [
    {
      "atomType": "Output",
      "name": "Output",
      "x": 0.98,
      "y": 0.5,
      "uniqueID": "ae97cfff-42b5-44c5-b875-330a5d3fc3a3",
      "ioValues": []
    },
    {
      "atomType": "Input",
      "name": "Base width",
      "x": 0.033,
      "y": 0.3819875776397516,
      "uniqueID": "a6a79867-8735-49fd-b82c-f85d408db661",
      "ioValues": [],
      "type": "number"
    },
    {
      "atomType": "Input",
      "name": "Height",
      "x": 0.033,
      "y": 0.5279503105590062,
      "uniqueID": "e1a81db9-fb57-4f9b-a157-a44ea8dbbbc6",
      "ioValues": [],
      "type": "number"
    },
    {
      "atomType": "Molecule",
      "name": "Plate",
      "x": 0.2754749568221071,
      "y": 0.6832298136645962,
      "uniqueID": "d00bfc97-32bb-4eca-bff6-871fa3ba1455",
      "ioValues": [],
      "topLevel": false,
      "allAtoms": [
        {
          "atomType": "Output",
          "name": "Output",
          "x": 0.98,
          "y": 0.5,
          "uniqueID": "3e2b0880-8f7f-497d-8b88-21a22929d83b",
          "ioValues": []
        }
      ],
      "allConnectors": [],
      "fileTypeVersion": 1,
      "compiledBom": {}
    },
    {
      "atomType": "Molecule",
      "name": "Planter",
      "x": 0.36960276338514686,
      "y": 0.3695652173913043,
      "uniqueID": "0d6a0bc5-674c-442d-8b29-438c33cf07a6",
      "ioValues": [
        {
          "name": "Base width",
          "ioValue": 200
        },
        {
          "name": "Height",
          "ioValue": 200
        }
      ],
      "topLevel": false,
      "allAtoms": [
        {
          "atomType": "Output",
          "name": "Output",
          "x": 0.98,
          "y": 0.5,
          "uniqueID": "27f2bfd9-77f4-42a6-ab60-0377746524cd",
          "ioValues": []
        },
        {
          "atomType": "Input",
          "name": "Base width",
          "x": 0.033,
          "y": 0.422360248447205,
          "uniqueID": "ae187170-5d33-4d6b-97be-f164f0fa9194",
          "ioValues": [],
          "type": "number"
        },
        {
          "atomType": "Input",
          "name": "Height",
          "x": 0.033,
          "y": 0.7142857142857143,
          "uniqueID": "0825e429-3f56-4812-a290-0478281742f0",
          "ioValues": [],
          "type": "number"
        },
        {
          "atomType": "Circle",
          "name": "Circle",
          "x": 0.24870466321243526,
          "y": 0.4316770186335404,
          "uniqueID": "99d9bf53-6016-46c6-9f6d-04a1b7536ae1",
          "ioValues": [
            {
              "name": "diameter",
              "ioValue": 200
            }
          ]
        },
        {
          "atomType": "Extrude",
          "name": "Extrude",
          "x": 0.3756476683937824,
          "y": 0.7795031055900621,
          "uniqueID": "c18671b9-8acb-4bd3-87ae-6ec6168e702d",
          "ioValues": [
            {
              "name": "height",
              "ioValue": 200
            }
          ]
        },
        {
          "atomType": "GitHubMolecule",
          "name": "Shell",
          "x": 0.5768566493955095,
          "y": 0.5217391304347826,
          "uniqueID": "c916d4c3-5f8f-4ccd-b6dc-52eb54dd10f3",
          "ioValues": [
            {
              "name": "Height",
              "ioValue": 200
            },
            {
              "name": "thickness",
              "ioValue": 10,
              "currentEquation": "10"
            }
          ],
          "topLevel": false,
          "allAtoms": [
            {
              "atomType": "Output",
              "name": "Output",
              "x": 0.98,
              "y": 0.5,
              "uniqueID": "fbebd27b-4858-4ee1-8ebc-9b45fef41bd0",
              "ioValues": []
            },
            {
              "atomType": "Code",
              "name": "Code",
              "x": 0.5189982728842832,
              "y": 0.3385093167701863,
              "uniqueID": "f38253cf-c063-4362-aca7-d1743f9af317",
              "ioValues": [
                {
                  "name": "height",
                  "ioValue": 200
                },
                {
                  "name": "thickness",
                  "ioValue": 10
                }
              ],
              "codeVersion": 1,
              "code": " \n      //Inputs:[inputShape, dist, height]\n      //This defines the molecules inputs and creates variables with the same names which can be referenced in the code\n      \n      const Inputs = [\n       {inputName: \"shape\", type: \"geometry\", defaultValue: null},\n        {inputName: \"height\", type: \"number\", defaultValue: 10},\n        {inputName: \"thickness\", type: \"number\", defaultValue: 4},\n      ]\n      //Takes the address and gets the shape from the library\n      let importedShape = library[shape]\n      console.log(importedShape)\n      //This makes a new copy of of the shape (to prevent garbage collection issues),\n      //and moves it in the X direction. Note that this will not work if the input is an assembly\n      let movedShape = importedShape.geometry[0].clone().shell(thickness, (f) => f.inPlane(\"XY\", height));\n      \n      \n      //Shapes stored in the library have tags, a color, a plane, and a bill of materials like this. We don't modify them here\n      let shape1 = {\n        geometry: [movedShape],\n        tags: importedShape.tags,\n        color: importedShape.color,\n        plane: importedShape.plane,\n        bom: importedShape.bom\n      }\n      \n      //We could at this point return shape1 as a complete shape and it will be automatically written to the library for us\n      return shape1\n      \n      //We can also create a new shape from scratch\n      let createdRectangle = replicad.drawRectangle(5,7)\n      //This is the plane we are going to put our new shape on\n      const newPlane = new Plane().pivot(0, 'Y');\n      //And we extrude the shape to make it 3D\n      let createdShape = createdRectangle.sketchOnPlane(newPlane).extrude(height)\n      \n      //For our new geometry we need to define the tags, color, plane, etc\n      let shape2 = {\n          geometry: [createdShape], \n          tags: [\"aTag\"],\n          color: '#A3CE5B',\n          plane: newPlane,\n          bom: []\n      }\n      \n      \n          /**\n          To Use the Code Atom, enter your inputs to the input list a.e Inputs:[shape, height]\n          If your input is connected to another atom with a replicad geometry you can access its geometry by looking up its ID in your library. a.e library[Input1].geometry[0] \n          Use any replicad available methods to modify your geometry. Learn more about all of the available methods at \n          https://replicad.xyz/docs/introapp/UserGuide.html \n          Return a replicad object that includes geometry, color, tags and plane. \n      \n      \n          Example Code Atom:\n      \n            Inputs:[shape, x];\n      \n            let finalShape = library[shape].geometry[0].clone.translate[x,0,0]\n      \n            return {geometry: finalShape, color: library[shape].color, plane: library[shape].plane, tags: library[shape].tags }\n      \n            - See more examples at _______ \n      \n      \n          */\n      "
            },
            {
              "atomType": "Circle",
              "name": "Circle",
              "x": 0.20293609671848015,
              "y": 0.8757763975155279,
              "uniqueID": "ddf0f66f-bc58-4072-9c00-a8548e83cbed",
              "ioValues": [
                {
                  "name": "diameter",
                  "ioValue": 40
                }
              ]
            },
            {
              "atomType": "Extrude",
              "name": "Extrude",
              "x": 0.34974093264248707,
              "y": 0.6304347826086957,
              "uniqueID": "46b8e656-c456-4abe-b8f2-862317e65d56",
              "ioValues": [
                {
                  "name": "height",
                  "ioValue": 200
                }
              ]
            },
            {
              "atomType": "Readme",
              "name": "README",
              "x": 0.44378306878306883,
              "y": 0.7186629526462396,
              "uniqueID": "6145697a-2344-4d2b-864a-3e0bb37f2803",
              "ioValues": [],
              "readMeText": "Readme text here",
              "global": true
            },
            {
              "atomType": "Input",
              "name": "Shape",
              "x": 0.033,
              "y": 0.3105590062111801,
              "uniqueID": "76bf7e64-f65b-47d5-a7e4-7af1db41c631",
              "ioValues": [],
              "type": "geometry"
            },
            {
              "atomType": "Input",
              "name": "Height",
              "x": 0.033,
              "y": 0.7298136645962733,
              "uniqueID": "ea65986f-76e2-4f8f-b871-1f63f97fba89",
              "ioValues": [],
              "type": "number"
            },
            {
              "atomType": "Code",
              "name": "Code",
              "x": 0.6493955094991364,
              "y": 0.7670807453416149,
              "uniqueID": "50aab380-80ca-4af8-8c77-5b7da828b91b",
              "ioValues": [
                {
                  "name": "dist",
                  "ioValue": 5
                },
                {
                  "name": "height",
                  "ioValue": 10
                }
              ],
              "codeVersion": 1,
              "code": "\n      const Inputs = [\n       {inputName: \"shape\", type: \"geometry\", defaultValue: null},\n      {inputName: \"dist\", type: \"number\", defaultValue: 5},\n        {inputName: \"height\", type: \"number\", defaultValue: 10}\n      ]\n      //This defines the molecules inputs and creates variables with the same names which can be referenced in the code\n\n      //Gets the shape from the library - no need to clone or access geometry directly\n      let importedShape = library[shape]\n\n      //Use the built-in Move function to move the shape in the X direction\n      let movedShape = await Move(importedShape, dist, 0, 0)\n\n      //Use the built-in Rotate function to rotate the shape\n      let rotatedShape = await Rotate(importedShape, 0, 45, 0)\n\n      //Use the built-in Scale function to make the shape smaller\n      let scaledShape = await Scale(importedShape, 0.8)\n\n      //Console.log works for debugging to better see what is happening under the hood\n      console.log(\"Original shape bounds:\", GetBounds(importedShape))\n      console.log(\"Moved shape bounds:\", GetBounds(movedShape))\n\n      //Create a new shape from scratch using replicad\n      let createdRectangle = replicad.drawRectangle(5, 7)\n      const newPlane = new replicad.Plane().pivot(0, 'Y')\n      let createdShape = createdRectangle.sketchOnPlane(newPlane).extrude(height)\n\n      //Wrap the raw replicad geometry in our assembly format\n      let shape2 = {\n          geometry: [createdShape],\n          dimension: \"3D\",\n          tags: [\"createdShape\"],\n          color: '#A3CE5B',\n          plane: newPlane,\n          bom: []\n      }\n\n      //Use the built-in Fillet function to round the edges\n      let filletedShape = await Fillet(shape2, 0.5)\n\n      //Use the built-in Chamfer function to bevel the edges  \n      let chamferedShape = await Chamfer(movedShape, 0.3)\n\n      //Use the built-in Assembly function to combine multiple shapes\n      let finalAssembly = await Assembly([rotatedShape, scaledShape, filletedShape, chamferedShape])\n\n      //You can also create boolean operations using Intersect\n      //let intersection = await Intersect(movedShape, rotatedShape)\n\n      return finalAssembly\n\n      /**\n      Built-in Functions Available:\n      - Move(geometry, x, y, z) - Move a shape in 3D space\n      - Rotate(geometry, x, y, z) - Rotate a shape around X, Y, Z axes (degrees)\n      - Scale(geometry, factor) - Scale a shape by a factor\n      - Assembly([shapes]) - Combine multiple shapes into an assembly\n      - Intersect(shape1, shape2) - Boolean intersection of two shapes\n      - GetBounds(geometry) - Get the bounding box of a shape\n      - Fillet(geometry, radius) - Round edges with specified radius\n      - Chamfer(geometry, size) - Bevel edges with specified size\n\n      To Use the Code Atom, enter your inputs to the input list as an object array:\n      const Inputs = [\n        {inputName: \"shape\", type: \"geometry\", defaultValue: null},\n        {inputName: \"dist\", type: \"number\", defaultValue: 5},\n        {inputName: \"height\", type: \"number\", defaultValue: 10}\n      ]\n\n      Access imported geometry using library[inputName] - the built-in functions handle \n      the complexity of accessing geometry arrays and maintaining metadata automatically.\n\n      Simple Example - Move a shape:\n         const Inputs = [\n          {inputName: \"shape\", type: \"geometry\", defaultValue: null},\n          {inputName: \"x\", type: \"number\", defaultValue: 5}\n        ]\n        let movedShape = await Move(library[shape], x, 0, 0)\n        return movedShape\n      */\n      "
            },
            {
              "atomType": "Input",
              "name": "thickness",
              "x": 0.033,
              "y": 0.5434782608695652,
              "uniqueID": "e14ffab6-5aac-460f-837b-4199a07d5361",
              "ioValues": [],
              "type": "number"
            }
          ],
          "allConnectors": [
            {
              "ap1Name": "output",
              "ap2Name": "number or geometry",
              "ap1ID": "f38253cf-c063-4362-aca7-d1743f9af317",
              "ap2ID": "fbebd27b-4858-4ee1-8ebc-9b45fef41bd0"
            },
            {
              "ap1Name": "geometry",
              "ap2Name": "geometry",
              "ap1ID": "ddf0f66f-bc58-4072-9c00-a8548e83cbed",
              "ap2ID": "46b8e656-c456-4abe-b8f2-862317e65d56"
            },
            {
              "ap1Name": "number or geometry",
              "ap2Name": "shape",
              "ap1ID": "76bf7e64-f65b-47d5-a7e4-7af1db41c631",
              "ap2ID": "f38253cf-c063-4362-aca7-d1743f9af317"
            },
            {
              "ap1Name": "number or geometry",
              "ap2Name": "height",
              "ap1ID": "ea65986f-76e2-4f8f-b871-1f63f97fba89",
              "ap2ID": "f38253cf-c063-4362-aca7-d1743f9af317"
            },
            {
              "ap1Name": "number or geometry",
              "ap2Name": "height",
              "ap1ID": "ea65986f-76e2-4f8f-b871-1f63f97fba89",
              "ap2ID": "46b8e656-c456-4abe-b8f2-862317e65d56"
            },
            {
              "ap1Name": "number or geometry",
              "ap2Name": "thickness",
              "ap1ID": "e14ffab6-5aac-460f-837b-4199a07d5361",
              "ap2ID": "f38253cf-c063-4362-aca7-d1743f9af317"
            }
          ],
          "parentRepo": {
            "privateRepo": false,
            "repoName": "Shell",
            "dateCreated": "2025-02-07T19:44:11Z",
            "readMe": "https://raw.githubusercontent.com/alzatin/Shell/master/README.md?sanitize=true",
            "yyyy": 2025,
            "topMoleculeID": 1738957450996,
            "githubMoleculesUsed": [],
            "html_url": "https://github.com/alzatin/Shell",
            "topics": [],
            "parentRepo": "BarbourSmith/Shell",
            "forks": 0,
            "dateModified": "739531",
            "ranking": 0,
            "searchField": "shell alzatin takes a 3d geometry and hollows it out to create a shell ",
            "owner": "alzatin",
            "description": "Takes a 3D Geometry and hollows it out to create a shell",
            "contentURL": "https://raw.githubusercontent.com/alzatin/Shell/master/project.abundance?sanitize=true",
            "svgURL": "https://raw.githubusercontent.com/alzatin/Shell/master/project.svg?sanitize=true",
            "isLocal": false
          },
          "unitsKey": "MM",
          "fileTypeVersion": 1,
          "compiledBom": []
        },
        {
          "atomType": "GitHubMolecule",
          "name": "Fillet",
          "x": 0.7020725388601036,
          "y": 0.2888198757763975,
          "uniqueID": "5295125f-6d59-47b9-a7ec-756641bfaa82",
          "ioValues": [
            {
              "name": "Fillet val",
              "ioValue": 3,
              "currentEquation": "3"
            }
          ],
          "topLevel": false,
          "allAtoms": [
            {
              "atomType": "Output",
              "name": "Output",
              "x": 0.98,
              "y": 0.5,
              "uniqueID": "b469fc7d-2b17-4553-b705-84424228e6e8",
              "ioValues": []
            },
            {
              "atomType": "Code",
              "name": "Code",
              "x": 0.4893617021276595,
              "y": 0.5903614457831325,
              "uniqueID": "9019732a-3824-495d-83df-7e98c950ef7b",
              "ioValues": [
                {
                  "name": "fillet",
                  "ioValue": 3
                }
              ],
              "codeVersion": 1,
              "code": "\n      const Inputs = [\n       {inputName: \"shape\", type: \"geometry\", defaultValue: null},\n      {inputName: \"fillet\", type: \"number\", defaultValue: .5},\n      \n      ]\n      //This defines the molecules inputs and creates variables with the same names which can be referenced in the code\n\n      //Takes the address and gets the shape from the library\n      let importedShape = library[shape]\n\n      //This makes a new copy of the shape and moves it in the X direction\n      let filletShape = importedShape.geometry[0].clone().fillet(fillet)\n\n      //Console.log works for debugging to better see what is happening under the hood\n      console.log(\"Shape:\")\n      console.log(importedShape);\n\n      //Shapes stored in the library have tags, a color, a plane, and a bill of materials like this. We don't modify them here\n      let shape1 = {\n        geometry: [filletShape],\n        tags: importedShape.tags,\n        color: importedShape.color,\n        plane: importedShape.plane,\n        bom: importedShape.bom\n      }\n\n    return shape1\n      "
            },
            {
              "atomType": "Circle",
              "name": "Circle",
              "x": 0.19632495164410058,
              "y": 0.38253012048192775,
              "uniqueID": "9016dc04-ef72-4c29-9998-3dd33aaf5540",
              "ioValues": [
                {
                  "name": "diameter",
                  "ioValue": 10
                }
              ]
            },
            {
              "atomType": "Extrude",
              "name": "Extrude",
              "x": 0.33462282398452614,
              "y": 0.4427710843373494,
              "uniqueID": "bf93d3b4-55ab-49f5-bfc0-dbc179417ecc",
              "ioValues": [
                {
                  "name": "height",
                  "ioValue": 10
                }
              ]
            },
            {
              "atomType": "Input",
              "name": "3D-Shape",
              "x": 0.033,
              "y": 0.5,
              "uniqueID": "cb01056c-d0df-4c5c-9136-892480bcdb72",
              "ioValues": [],
              "type": "geometry"
            },
            {
              "atomType": "Input",
              "name": "Fillet val",
              "x": 0.033,
              "y": 0.713855421686747,
              "uniqueID": "56f1d7eb-7bf9-47ce-9a63-4d4ee3e2ed67",
              "ioValues": [],
              "type": "number"
            }
          ],
          "allConnectors": [
            {
              "ap1Name": "output",
              "ap2Name": "number or geometry",
              "ap1ID": "9019732a-3824-495d-83df-7e98c950ef7b",
              "ap2ID": "b469fc7d-2b17-4553-b705-84424228e6e8"
            },
            {
              "ap1Name": "geometry",
              "ap2Name": "geometry",
              "ap1ID": "9016dc04-ef72-4c29-9998-3dd33aaf5540",
              "ap2ID": "bf93d3b4-55ab-49f5-bfc0-dbc179417ecc"
            },
            {
              "ap1Name": "number or geometry",
              "ap2Name": "shape",
              "ap1ID": "cb01056c-d0df-4c5c-9136-892480bcdb72",
              "ap2ID": "9019732a-3824-495d-83df-7e98c950ef7b"
            },
            {
              "ap1Name": "number or geometry",
              "ap2Name": "fillet",
              "ap1ID": "56f1d7eb-7bf9-47ce-9a63-4d4ee3e2ed67",
              "ap2ID": "9019732a-3824-495d-83df-7e98c950ef7b"
            }
          ],
          "parentRepo": {
            "lastFoundGit": "2025-10-07T15:47:14.795Z",
            "privateRepo": false,
            "repoName": "Fillet",
            "dateCreated": "2025-09-11T17:53:30Z",
            "readMe": "https://raw.githubusercontent.com/alzatin/Fillet/master/README.md?sanitize=true",
            "yyyy": 2025,
            "topMoleculeID": "af7414ca-2d93-4ac0-abbd-27feee4ef8f1",
            "githubMoleculesUsed": [],
            "html_url": "https://github.com/alzatin/Fillet",
            "topics": [
              "abundance-tool"
            ],
            "parentRepo": null,
            "forks": 0,
            "dateModified": "739513",
            "ranking": 0,
            "searchField": "fillet alzatin fillet operation: receives a 3d shape and fillets the shape by a given value.  abundance-tool",
            "owner": "alzatin",
            "description": "Fillet operation: Receives a 3D shape and fillets the shape by a given value. ",
            "contentURL": "https://raw.githubusercontent.com/alzatin/Fillet/master/project.abundance?sanitize=true",
            "svgURL": "https://raw.githubusercontent.com/alzatin/Fillet/master/project.svg?sanitize=true",
            "isLocal": false
          },
          "unitsKey": "Inches",
          "fileTypeVersion": 1,
          "compiledBom": []
        }
      ],
      "allConnectors": [
        {
          "ap1Name": "number or geometry",
          "ap2Name": "diameter",
          "ap1ID": "ae187170-5d33-4d6b-97be-f164f0fa9194",
          "ap2ID": "99d9bf53-6016-46c6-9f6d-04a1b7536ae1"
        },
        {
          "ap1Name": "number or geometry",
          "ap2Name": "height",
          "ap1ID": "0825e429-3f56-4812-a290-0478281742f0",
          "ap2ID": "c18671b9-8acb-4bd3-87ae-6ec6168e702d"
        },
        {
          "ap1Name": "number or geometry",
          "ap2Name": "Height",
          "ap1ID": "0825e429-3f56-4812-a290-0478281742f0",
          "ap2ID": "c916d4c3-5f8f-4ccd-b6dc-52eb54dd10f3"
        },
        {
          "ap1Name": "geometry",
          "ap2Name": "geometry",
          "ap1ID": "99d9bf53-6016-46c6-9f6d-04a1b7536ae1",
          "ap2ID": "c18671b9-8acb-4bd3-87ae-6ec6168e702d"
        },
        {
          "ap1Name": "geometry",
          "ap2Name": "Shape",
          "ap1ID": "c18671b9-8acb-4bd3-87ae-6ec6168e702d",
          "ap2ID": "c916d4c3-5f8f-4ccd-b6dc-52eb54dd10f3"
        },
        {
          "ap1Name": "geometry or number",
          "ap2Name": "3D-Shape",
          "ap1ID": "c916d4c3-5f8f-4ccd-b6dc-52eb54dd10f3",
          "ap2ID": "5295125f-6d59-47b9-a7ec-756641bfaa82"
        },
        {
          "ap1Name": "geometry or number",
          "ap2Name": "number or geometry",
          "ap1ID": "5295125f-6d59-47b9-a7ec-756641bfaa82",
          "ap2ID": "27f2bfd9-77f4-42a6-ab60-0377746524cd"
        }
      ],
      "fileTypeVersion": 1,
      "compiledBom": []
    }
  ],
  "allConnectors": [
    {
      "ap1Name": "number or geometry",
      "ap2Name": "Base width",
      "ap1ID": "a6a79867-8735-49fd-b82c-f85d408db661",
      "ap2ID": "0d6a0bc5-674c-442d-8b29-438c33cf07a6"
    },
    {
      "ap1Name": "number or geometry",
      "ap2Name": "Height",
      "ap1ID": "e1a81db9-fb57-4f9b-a157-a44ea8dbbbc6",
      "ap2ID": "0d6a0bc5-674c-442d-8b29-438c33cf07a6"
    }
  ],
  "unitsKey": "MM",
  "fileTypeVersion": 1,
  "compiledBom": {},
  "filetypeVersion": 1
}